cabal-version: 1.12

-- This file has been generated from package.yaml by hpack version 0.31.1.
--
-- see: https://github.com/sol/hpack
--
-- hash: c65f2c3ca5df45c3dc5cae8710f234399c21f88e218b3f92ddce2675a4b68470

name:           comptrans
version:        0.1.0.6
synopsis:       Automatically converting ASTs into compositional data types
description:    Template Haskell for converting an AST for a language written using normal
                algebraic data types into ones written using multi-sorted compositional data types
                (`Data.Comp.Multi` from the `compdata` library) so that you can use generic and modular operators
                on it. You might need to add additional constructors that can e.g.: convert a (Term e Foo) into a
                (Term e [Foo]).
                .
                The sCource files have comments showing example output for a simple language. See the examples directory
                for an extended example of generating a compositional data type for the entire Java language, with labelled variants
                as well as variants where an entire project of source files can be treated as a single AST -- and you can use the same operations
                on all of them!
category:       Data,Generics
homepage:       https://github.com/jkoppel/comptrans#readme
bug-reports:    https://github.com/jkoppel/comptrans/issues
author:         James Koppel
maintainer:     James Koppel
license:        BSD3
license-file:   LICENSE
build-type:     Simple

source-repository head
  type: git
  location: https://github.com/jkoppel/comptrans

library
  exposed-modules:
      Data.Comp.Derive.Generic
      Data.Comp.Trans
  other-modules:
      Data.Comp.Trans.Collect
      Data.Comp.Trans.DeriveMulti
      Data.Comp.Trans.DeriveTrans
      Data.Comp.Trans.DeriveUntrans
      Data.Comp.Trans.Util
      Paths_comptrans
  hs-source-dirs:
      ./.
  ghc-options: -Wall
  build-depends:
      base
    , bytestring
    , containers
    , cubix-compdata
    , deepseq
    , deepseq-generics
    , ghc-prim
    , lens
    , mtl
    , syb
    , template-haskell
    , text
    , th-expand-syns
    , transformers
  default-language: Haskell2010
